- type: Definition
  title: Have an idea for drone API
  description: >-
    I want to explore what is possible with developing a drone API without the
    actual work of having to develop one and invest too much time and resources.
  url: ''
  issue: ''
  date: 01/01/2017
- type: Definition
  title: Dump data from drone platform
  description: >-
    I pulled data from the drone platforms I use to get an idea for the type of
    data, media, and other bits are in play. I wanted to use this as the
    blueprint for what I was doing with my prototype.
  url: ''
  issue: ''
  date: 01/02/2017
- type: Definition
  title: Identify the schema for data
  description: >-
    I went through all the ata and created JSON schema for all the data I wanted
    to keep, identifying and organizing the important bits that I wanted to keep
    and make part of the drone API.
  url: ''
  issue: ''
  date: 01/03/2017
- type: Definition
  title: Create an OpenAPI for API
  description: >-
    I created an OpenAPI definition with details of all of the APIs I wanted to
    create to access and manage the data I have outlined in my schema.
  url: ''
  issue: ''
  date: 01/04/2017
- type: Management
  title: Setup Github Organization
  description: >-
    All APIs start with Github in my world, so I setup an organization for this
    operation, giving me an area to publish all the projects underneath this
    umbrella.
  url: ''
  issue: ''
  date: 01/05/2017
- type: Definition
  title: Setup Definition Repository
  description: >-
    I setup a Github repository for storing all the definitions associated with
    the drone API, setting it up for both human and programmatic consumption
    through the lifecycle of this API.
  url: ''
  issue: ''
  date: 01/06/2017
- type: Definition
  title: Guide
  description: >-
    I created a guide outlining all the definitions used as part of the drone
    API, providing a single place to find all definitions for the project, and
    hang any new definitions generated in future work.
  url: ''
  issue: ''
  date: 01/07/2017
- type: Design
  title: Versioning
  description: >-
    We needed to make a decision around how we handle the version of the API.
    Are we going to do in the header, in url, or are we going to rely on the
    design of our API to handle versioning for us, making it something we aren't
    going to do? 
  url: ''
  issue: ''
  date: 01/08/2017
- type: Design
  title: Paths
  description: >-
    Establish structure and guidance for how all paths are crafted for APIs
    deployed across the platform. Specifically using plain english words that
    describe what each resource does, following common elements of a RESTful
    approach.
  url: ''
  issue: ''
  date: 01/09/2017
- type: Design
  title: Verbs
  description: >-
    What is the verb strategy? How are we using POST, PUT, and DELETE as well as
    GET. What is the POST v PUT strategy? How are we handling OPTIONS, and HEAD?
    We need a standard approach.
  url: ''
  issue: ''
  date: 01/10/2017
- type: Design
  title: Actions
  description: >-
    Beyond the basic verbs provided us how will we be handling more advanced
    actions? What are the path and verb strategies for tackling more complex
    transformations involving the API resources we are making available.
  url: ''
  issue: ''
  date: 01/11/2017
- type: Design
  title: Parameters
  description: >-
    What are the common parameters we are using across all available API paths?
    Let's think through the parameters as part of our overall schema definition
    strategy, and reference them using JSON schema references in the OpenAPI for
    the project.
  url: ''
  issue: ''
  date: 01/12/2017
- type: Design
  title: Headers
  description: >-
    Similar to parameters, what is our header strategy? Let's educate ourselves
    about the common headers out there, as well as some of the lesser known
    headers that might contribute to other areas of our API design. Let's
    organize them as part of our larger schema definition in the OpenAPI.
  url: ''
  issue: ''
  date: 01/13/2017
- type: Design
  title: Body
  description: >-
    We are setting the standard for how we are using the body across all our API
    calls. Are all POST and PUTs using the body. How are we handling file
    uploads and the upload and downloading of heavy objects used across our API
    design.
  url: ''
  issue: ''
  date: 01/14/2017
- type: Design
  title: Pagination
  description: >-
    What is the standard approach to doing pagination across API responses? Are
    we considering hypermedia in this process? Are we going a simpler route and
    following an existing standard from an API that is well known? Establish the
    standard for pagination of large datasets.
  url: ''
  issue: ''
  date: 01/15/2017
- type: Design
  title: Schema Filtering
  description: >-
    What is the standard for allowing the actual schema returend in API
    responses to be filtered, minimized, or expanded? Allowing for API consumers
    to specify how little, or how much data they received. Are we considering a
    more holistic approach using GraphQL. Do we want our consumers to have this
    control, or will we be handling in our API design.
  url: ''
  issue: ''
  date: 01/16/2017
- type: Design
  title: Data Filtering
  description: >-
    Beyond the schema, what approaches to allowing API consumers to filter data
    that is returned. Searching, filtering, and other approaches to allowing
    consumers to get exactlyt he data they need.
  url: ''
  issue: ''
  date: 01/17/2017
- type: Design
  title: Sorting
  description: >-
    How will data be sorted? Is this an area we are looking at GraphQL or more
    holistic approach, or do we have a simpler approach, following the lead of
    popular APIs, using sorting patterns that developer are already used to.
  url: ''
  issue: ''
  date: 01/18/2017
- type: Design
  title: Granularity
  description: >-
    Have we stepped back and look at the granularitiy of API paths and
    definitions? Are things small, modular, well thought out, and provide
    valuable units of compute?
  url: ''
  issue: ''
  date: 01/19/2017
- type: Design
  title: Simplicity
  description: >-
    Are things simple? Has complexity been reduced? Are all aspects of the
    design intuitive and quick to understand what is possible? Let's focus on
    simplicity across every aspect of the design.
  url: ''
  issue: ''
  date: 01/20/2017
- type: Design
  title: Readablity
  description: >-
    Always review the API design and check for readabililty. Can you scan the
    design and understand what is going on. Naming, summary, and description are
    always plain english and meant more for humans than for computers.
  url: ''
  issue: ''
  date: 01/21/2017
- type: Design
  title: Relationships
  description: >-
    Have we evaluated and considered the releationships between our APIs and the
    resources we are making available. Are the relationships represented in the
    design of our API?
  url: ''
  issue: ''
  date: 01/22/2017
- type: Design
  title: Status
  description: >-
    Take the time to evaluate the HTTP status codes returned across ALL API
    requests. Are there more than just 200, 404, and 500 status codes available,
    helping other systems truly understand what is going on with API responses.
  url: ''
  issue: ''
  date: 01/23/2017
- type: Design
  title: Errors
  description: >-
    Along with proper HTTP status codes is there a common definition model
    defined to represent all errors that will be returned as part of API
    responses. Is this definition represented in the OpenAPI with associates
    with each individual API response definition.
  url: ''
  issue: ''
  date: 01/24/2017
- type: Design
  title: Media Types
  description: >-
    Is there a clear media type strategy in place outline what media types the
    API will accept and respond with? Is content negotiation built into the
    original design of the API, even if single media types are available in
    early versions? Ideally all APIs respond with HTML, XML, JSON, and even CSV
    to support a wide range of applications.
  url: ''
  issue: ''
  date: 01/25/2017
- type: Design
  title: Hypermedia
  description: >-
    What research has gone into leading hypermedia formats, contributing to the
    overall design discussion for this API? Each API should evaluate the
    benefits hypermedia would bring to the design and functionality as part of
    the design process.
  url: ''
  issue: ''
  date: 01/26/2017
- type: Design
  title: Standards
  description: >-
    What other standards are missing from the design of our APIs and underlying
    schema? Have we considered existing schema like Schema.org, and are we using
    common standards for dates, currencies, and other elements of the design?
    Take time to understand what standards already exist and avoid reinventing
    the wheel whenever possible.
  url: ''
  issue: ''
  date: 01/27/2017
- type: Definitions
  title: Update OpenAPI
  description: >-
    Take everything we've learned and applied to the API's design and make sure
    the OpenAPI reflects the API design change log, providing a machine readable
    definition of the API surface area that has been hammered out as part of
    this process.
  url: ''
  issue: ''
  date: 01/28/2017
- type: Design
  title: Guide
  description: >-
    Take a moment and gather up all the decisions made throughout the API design
    process, and cumulatively with each API this process is applied, and
    document them in a guide for standardization across all teams. The guide
    should be evolved as the design process changes, and be published where all
    team members can access and contribute, and even shared publicly when it
    makes sense.
  url: ''
  issue: ''
  date: 01/29/2017
- type: Deployment
  title: Platform
  description: >-
    Identify which platform(s) APIs will operate in. Either AWS, Google, Azure,
    Heroku, or other, have a standard approach to account management, billing,
    and the deployment and operation of resources. Establish standard, and put
    in practice for deploying the database, DNS, compute, and other essential
    resources used throughout the API lifecycle.
  url: ''
  issue: ''
  date: 02/01/2017
- type: Database
  title: Database
  description: >-
    Setup and configure the database or databases for the backend of our API
    using the schema designs we've accumulated so far. 
  url: ''
  issue: ''
  date: 01/30/2017
- type: Deployment
  title: Server
  description: >-
    Identify the server platform to be used and setup then configure an instance
    in support of API operations. This could also be  leading examples of
    serverless environments, and leading edge approaches to deploying code these
    days.
  url: ''
  issue: ''
  date: 02/02/2017
- type: DNS
  title: DNS
  description: >-
    Establish which DNS platform will be sed to support APIs, and establish a
    plan for setting up, configuring, and managing DNS in support of API
    operations.
  url: ''
  issue: ''
  date: ''
- type: Deployment
  title: Framework
  description: >-
    Reseach the available API deployment frameworks for the programming
    languages we have resources available in, and choose the right framework(s)
    for use in deploying any API--establish common practices for deploying APIs
    from start to finish.
  url: ''
  issue: ''
  date: 01/31/2017
- type: DNS
  title: Identify a host
  description: >-
    Establish a host for use across API operations, for base URL, developer
    portal, and other supporting resources.
  url: ''
  issue: ''
  date: 02/03/2017
- type: DNS
  title: Identify a base URL
  description: >-
    Establish a base URL for the API, serving as the root of all API
    calls--keeping it clean and simple.
  url: ''
  issue: ''
  date: 02/04/2017
- type: DNS
  title: Guide
  description: >-
    Stop and establish a guide to DNS for the platform. Even if the same domain
    or sudbomain is used, provide guidance on how new subdomains are setup, and
    how supporting projects work. Include the details of logging, monitoring,
    and other aspects of DNS as it overlaps with API operations.
  url: ''
  issue: ''
  date: 02/05/2017
- type: Encryption
  title: Thinking about encryption
  description: >-
    Consider encrkyption for EVERYTHING across API operations, making it default
    for anything in transport in suppor of the API.
  url: ''
  issue: ''
  date: 02/06/2017
- type: Deployment
  title: Thinking about CORS
  description: >-
    Make sure we have CORS enabled. We aren't running a website, we need things
    to be available across domains. Consider locking down to approved
    application list if security is a concern.
  url: ''
  issue: ''
  date: 02/07/2017
- type: Deployment
  title: Server Skeleton
  description: >-
    Take the OpenAPI and generate server skeletons in the programming and
    platform of choice. Doing the heavy lifting of developing each API, while
    keeping things in check with the latest edition of the OpenAPI.
  url: ''
  issue: ''
  date: 02/08/2017
- type: Deployment
  title: Artisan Finish
  description: >-
    Take even more time to polish each endpoint for the API, wiring things up to
    the database, algorithms, and other resources that will be being served up
    as part of API operations.
  url: ''
  issue: ''
  date: 02/09/2017
- type: Deployment
  title: Guide
  description: >-
    Take the time to pause and document everthing accomplished as part of the
    development process, coming up with a standard approach deploying APis
    across all operations. Publish the guide where everyone involved with
    development can get at it.
  url: ''
  issue: ''
  date: 02/10/2017
- type: Management
  title: API Management
  description: ''
  url: ''
  issue: ''
  date: 02/11/2017
- type: Authentication
  title: Authentication Strategy
  description: ''
  url: ''
  issue: ''
  date: 02/12/2017
- type: Monetization
  title: Acquisitions Costs
  description: ''
  url: ''
  issue: ''
  date: 02/13/2017
- type: Monetization
  title: Developer Cost
  description: ''
  url: ''
  issue: ''
  date: 02/14/2017
- type: Monetization
  title: Operational Cost
  description: ''
  url: ''
  issue: ''
  date: 02/15/2017
- type: Monetization
  title: Direct Value
  description: ''
  url: ''
  issue: ''
  date: 02/16/2017
- type: Monetization
  title: Indirect Value
  description: ''
  url: ''
  issue: ''
  date: 02/17/2017
- type: Plans
  title: Unit of Value
  description: ''
  url: ''
  issue: ''
  date: 02/18/2017
- type: Plans
  title: Timeframes
  description: ''
  url: ''
  issue: ''
  date: 02/19/2017
- type: Plans
  title: Metrics
  description: ''
  url: ''
  issue: ''
  date: 02/20/2017
- type: Plans
  title: Limits
  description: ''
  url: ''
  issue: ''
  date: 02/21/2017
- type: Plans
  title: Access Tiers
  description: ''
  url: ''
  issue: ''
  date: 02/22/2017
- type: Plans
  title: Regions
  description: ''
  url: ''
  issue: ''
  date: 02/23/2017
- type: Plans
  title: Features
  description: ''
  url: ''
  issue: ''
  date: 02/24/2017
- type: Management
  title: Configure API management
  description: ''
  url: ''
  issue: ''
  date: 02/25/2017
- type: Logging
  title: Logging
  description: ''
  url: ''
  issue: ''
  date: 02/26/2017
- type: Management
  title: Reporting
  description: ''
  url: ''
  issue: ''
  date: 02/27/2017
- type: Authentication
  title: Github Auth
  description: ''
  url: ''
  issue: ''
  date: 02/28/2017
- type: Authentication
  title: Twitter Auth
  description: ''
  url: ''
  issue: ''
  date: 03/01/2017
- type: Authentication
  title: Facebook Auth
  description: ''
  url: ''
  issue: ''
  date: 03/02/2017
- type: Authentication
  title: Google Auth
  description: ''
  url: ''
  issue: ''
  date: 03/03/2017
- type: Management
  title: Registration
  description: ''
  url: ''
  issue: ''
  date: 03/04/2017
- type: Management
  title: Acceptance
  description: ''
  url: ''
  issue: ''
  date: 03/05/2017
- type: Management
  title: Signup Email
  description: ''
  url: ''
  issue: ''
  date: 03/06/2017
- type: Portal
  title: Github Repo For Portal
  description: ''
  url: ''
  issue: ''
  date: 03/07/2017
- type: Portal
  title: Github Page for Portal
  description: ''
  url: ''
  issue: ''
  date: 03/08/2017
- type: DNS
  title: Portal URL
  description: ''
  url: ''
  issue: ''
  date: 03/09/2017
- type: Portal
  title: Description
  description: ''
  url: ''
  issue: ''
  date: 03/10/2017
- type: Documentation
  title: Generate documentation from OpenAPI
  description: ''
  url: ''
  issue: ''
  date: 03/11/2017
- type: SDK
  title: Generate SDKs / Libraries from OpenAPI
  description: ''
  url: ''
  issue: ''
  date: 03/12/2017
- type: Portal
  title: Code Page
  description: ''
  url: ''
  issue: ''
  date: 03/13/2017
- type: Portal
  title: Getting Started Page
  description: ''
  url: ''
  issue: ''
  date: 03/14/2017
- type: Portal
  title: Authentication Page
  description: ''
  url: ''
  issue: ''
  date: 03/15/2017
- type: Portal
  title: FAQ Page
  description: ''
  url: ''
  issue: ''
  date: 03/16/2017
- type: Support
  title: Support Channels
  description: ''
  url: ''
  issue: ''
  date: 03/17/2017
- type: Portal
  title: Support Page
  description: ''
  url: ''
  issue: ''
  date: 03/18/2017
- type: Portal
  title: Road Map Page
  description: ''
  url: ''
  issue: ''
  date: 03/19/2017
- type: Portal
  title: Issues Page
  description: ''
  url: ''
  issue: ''
  date: 03/20/2017
- type: Portal
  title: Change Log Page
  description: ''
  url: ''
  issue: ''
  date: 03/21/2017
- type: Management
  title: Developer dashboard
  description: ''
  url: ''
  issue: ''
  date: 03/22/2017
- type: Management
  title: Developer message
  description: ''
  url: ''
  issue: ''
  date: 03/23/2017
- type: Management
  title: Developer applications
  description: ''
  url: ''
  issue: ''
  date: 03/24/2017
- type: Management
  title: Developer plans
  description: ''
  url: ''
  issue: ''
  date: 03/25/2017
- type: Management
  title: Developer usage analytics
  description: ''
  url: ''
  issue: ''
  date: 03/26/2017
- type: Management
  title: Developing billing
  description: ''
  url: ''
  issue: ''
  date: 03/27/2017
- type: Management
  title: Password reset
  description: ''
  url: ''
  issue: ''
  date: 03/28/2017
- type: Management
  title: Delete account
  description: ''
  url: ''
  issue: ''
  date: 03/29/2017
- type: Management
  title: Guide
  description: ''
  url: ''
  issue: ''
  date: 03/30/2017
- type: Terms of Service
  title: Terms of Service
  description: ''
  url: ''
  issue: ''
  date: 03/31/2017
- type: Privacy
  title: Privacy Policy
  description: ''
  url: ''
  issue: ''
  date: 04/01/2017
- type: Deprecation
  title: Deprecation Policy
  description: ''
  url: ''
  issue: ''
  date: 04/02/2017
- type: Reliability
  title: Service Accord / SLA
  description: ''
  url: ''
  issue: ''
  date: 04/03/2017
- type: Management
  title: User management API
  description: ''
  url: ''
  issue: ''
  date: 04/04/2017
- type: Management
  title: Account management API
  description: ''
  url: ''
  issue: ''
  date: 04/05/2017
- type: Management
  title: Application management API
  description: ''
  url: ''
  issue: ''
  date: 04/06/2017
- type: Management
  title: Plan management API
  description: ''
  url: ''
  issue: ''
  date: 04/07/2017
- type: Management
  title: Usage management API
  description: ''
  url: ''
  issue: ''
  date: 04/08/2017
- type: Management
  title: Billing management API
  description: ''
  url: ''
  issue: ''
  date: 04/09/2017
- type: Management
  title: Service management API
  description: ''
  url: ''
  issue: ''
  date: 04/10/2017
- type: Management
  title: Message management API
  description: ''
  url: ''
  issue: ''
  date: 04/11/2017
- type: Virtualization
  title: Mocks
  description: ''
  url: ''
  issue: ''
  date: 04/12/2017
- type: Virtualization
  title: Sandbox
  description: ''
  url: ''
  issue: ''
  date: 04/13/2017
- type: Deployment
  title: Containers
  description: ''
  url: ''
  issue: ''
  date: 04/14/2017
- type: Deployment
  title: Image
  description: ''
  url: ''
  issue: ''
  date: 04/15/2017
- type: Communications
  title: Blog
  description: ''
  url: ''
  issue: ''
  date: 04/16/2017
- type: Communications
  title: Blog Feed
  description: ''
  url: ''
  issue: ''
  date: 04/17/2017
- type: Communications
  title: Twitter
  description: ''
  url: ''
  issue: ''
  date: 04/18/2017
- type: Communications
  title: Strategy
  description: ''
  url: ''
  issue: ''
  date: 04/19/2017
- type: Communications
  title: Communication strategy
  description: ''
  url: ''
  issue: ''
  date: 04/20/2017
- type: Support
  title: Support strategy
  description: ''
  url: ''
  issue: ''
  date: 04/21/2017
- type: Evangelism
  title: Evangelism strategy
  description: ''
  url: ''
  issue: ''
  date: 04/22/2017
- type: Monitoring
  title: API monitoring
  description: ''
  url: ''
  issue: ''
  date: 04/23/2017
- type: Communications
  title: Communicate monitoring
  description: ''
  url: ''
  issue: ''
  date: 04/24/2017
- type: Performance
  title: API performance
  description: ''
  url: ''
  issue: ''
  date: 04/25/2017
- type: Communications
  title: Communicate performance
  description: ''
  url: ''
  issue: ''
  date: 04/26/2017
- type: Monitoring
  title: Status dashboard
  description: ''
  url: ''
  issue: ''
  date: 04/27/2017
- type: Communications
  title: Communicate status
  description: ''
  url: ''
  issue: ''
  date: 04/28/2017
- type: Security
  title: API security
  description: ''
  url: ''
  issue: ''
  date: 04/29/2017
- type: Portal
  title: Security page
  description: ''
  url: ''
  issue: ''
  date: 04/30/2017
- type: Communications
  title: Communicate security
  description: ''
  url: ''
  issue: ''
  date: 05/01/2017
- type: Licensing
  title: API licensing
  description: ''
  url: ''
  issue: ''
  date: 05/02/2017
- type: Licensing
  title: Schema licensing
  description: ''
  url: ''
  issue: ''
  date: 05/03/2017
- type: Licensing
  title: Data licensing
  description: ''
  url: ''
  issue: ''
  date: 05/04/2017
- type: Licensing
  title: Code licensing
  description: ''
  url: ''
  issue: ''
  date: 05/05/2017
- type: Communications
  title: Communicate licensing
  description: ''
  url: ''
  issue: ''
  date: 05/06/2017
- type: Branding
  title: Branding
  description: ''
  url: ''
  issue: ''
  date: 05/07/2017
- type: Discovery
  title: Discovery
  description: ''
  url: ''
  issue: ''
  date: 05/08/2017
- type: Discovery
  title: APIs.json
  description: ''
  url: ''
  issue: ''
  date: 05/09/2017
- type: Discovery
  title: Postman collection
  description: ''
  url: ''
  issue: ''
  date: 05/10/2017
- type: Webhooks
  title: Webhooks
  description: ''
  url: ''
  issue: ''
  date: 05/11/2017
- type: Portal
  title: Webhook page
  description: ''
  url: ''
  issue: ''
  date: 05/12/2017
- type: Management
  title: Webhook API
  description: ''
  url: ''
  issue: ''
  date: 05/13/2017
- type: Communications
  title: Announce Webhook API
  description: ''
  url: ''
  issue: ''
  date: 05/14/2017
- type: Logging
  title: Logging
  description: ''
  url: ''
  issue: ''
  date: 05/15/2017
- type: Management
  title: Logging API
  description: ''
  url: ''
  issue: ''
  date: 05/16/2017
- type: Communications
  title: Announce Logging API
  description: ''
  url: ''
  issue: ''
  date: 05/17/2017
- type: Integration
  title: Integrations
  description: ''
  url: ''
  issue: ''
  date: 05/18/2017
- type: Portal
  title: Integration Page
  description: ''
  url: ''
  issue: ''
  date: 05/19/2017
- type: Integration
  title: Integration API
  description: ''
  url: ''
  issue: ''
  date: 05/20/2017
- type: Communications
  title: Announce Integration API
  description: ''
  url: ''
  issue: ''
  date: 05/21/2017
- type: Evangelism
  title: Developer Page
  description: ''
  url: ''
  issue: ''
  date: 05/22/2017
- type: Evangelism
  title: Developer API
  description: ''
  url: ''
  issue: ''
  date: 05/23/2017
- type: Evangelism
  title: Communicate Developer
  description: ''
  url: ''
  issue: ''
  date: 05/24/2017
- type: Evangelism
  title: Applications Page
  description: ''
  url: ''
  issue: ''
  date: 05/25/2017
- type: Evangelism
  title: Communicate Applications
  description: ''
  url: ''
  issue: ''
  date: 05/26/2017
